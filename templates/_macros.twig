{# @var craft \craft\web\twig\variables\CraftVariable #}
  {#
    dateFormatted
    Format Date for consistency.
    @param {datetime} givenDate (the date to format)
  #}
  {%- macro dateFormatted(givenDate) -%}
    {{ givenDate | date("jS F Y") }}
  {%- endmacro -%}


  {# Create Auto Copyright Year Range #}
  {%- macro autoCopyright(startYear) -%}
    {% set currentYear = now.year %}
    {% set startYear = startYear|default(currentYear) %}
    {% set copyrightYears = ((startYear < currentYear) ? (startYear ~ ' - ' ~ currentYear) : startYear) %}
    {{ copyrightYears }}
  {%- endmacro -%}

{# MACRO TO SET THE FILE SIZE IN KB OR MB #}
  {#
    dateRange
    Generates a date range for two numbers. If the start and end date have a matching month, the month isn't repeated.
    @param {datetime} start (the first date)
    @param {datetime} end (the end date) (optional)
    @param {string} dash (range separator) (optional)
  #}
  {%- macro fileSize(download) -%}
    {% set bytes = download.size %}
    {% set kilobyte = 1024 %}
    {% set megabyte = kilobyte * 1024 %}
    {% set gigabyte = megabyte * 1024 %}
    {% set terabyte = gigabyte * 1024 %}

    {% if bytes < kilobyte %}
      {{ bytes ~ ' B' }}
    {% elseif bytes < megabyte %}
      {{ (bytes / kilobyte)|number_format(0, '.') ~ 'KB' }}
    {% elseif bytes < gigabyte %}
      {{ (bytes / megabyte)|number_format(1, '.') ~ 'MB' }}
    {% elseif bytes < terabyte %}
      {{ (bytes / gigabyte)|number_format(2, '.') ~ 'GB' }}
    {% else %}
      {{ (bytes / terabyte)|number_format(2, '.') ~ 'TB' }}
    {% endif %}
  {%- endmacro -%}

  {#
    dateRange
    Generates a date range for two numbers. If the start and end date have a matching month, the month isn't repeated.
    @param {datetime} start (the first date)
    @param {datetime} end (the end date) (optional)
    @param {string} dash (range separator) (optional)
  #}
  {%- macro dateRange(start, end, dash) -%}
    {%- set dash = dash|default(" &ndash; ") -%}
    {%- if end -%}
      {{- start|date('F j') -}}
      {{- dash|raw -}}
      {%- if start|date('F') == end|date('F') -%}
        {{- end|date('j, Y') -}}
      {%- else -%}
        {{- end|date('F j, Y') -}}
      {%- endif -%}
    {%- else -%}
      {{- start|date('F j, Y') -}}
    {%- endif -%}
  {%- endmacro -%}

  {#
    ordinalNum
    Given a number, it returns the number along with the ordinal suffix (e.g. st, nd, rd, th)
    Credit: Based on the JavaScript version written by Salman Arshad @ https://stackoverflow.com/questions/13627308/add-st-nd-rd-and-th-ordinal-suffix-to-a-number
    @param {int} number (Number you wish to return with ordinal suffix)
  #}

  {% macro ordinalNum(number) %}
    {% set j = number % 10 %}
    {% set k = number % 100 %}
    {% if j == 1 and k != 11 %}
      {{ number }}st
    {% elseif j == 2 and k != 12 %}
      {{ number }}nd
    {% elseif j == 3 and k != 13 %}
      {{ number }}rd
    {% else %}
      {{ number }}th
    {% endif %}
  {% endmacro %}

  {#
    linkToIf
    Inspired by the Rails URLHelper link_to_if. Wrapped the block with a link if the condition is met.
    @param {string} condition (The condition to check if the block should be linked)
    @param {string} linkto (The href of the link)
    @param {string} block (The block of content that would be output with or within a link)
    @param {string} classes (Classes to include on the link) (optional)
  #}

  {% macro linkToIf(condition, linkto, block, external, classes) %}
    {% set external = external|default(false) %}
    {% set classes = classes|default(null) %}
    {%- if condition %}<a href="{{ linkto }}" {% if classes %}class="{{ classes }}"{% endif %} {% if external %}target="_blank" rel="noopener"{% endif %}>{% endif -%}
    {{ block }}
    {%- if condition %}</a>{% endif -%}
  {% endmacro %}

  {#
    randomString
    Generates a random string containing uppercase, lowercase, and numbers based on the length that is passed in.
    @param {int} length (The amount of characters within the returned string)
  #}

  {%- macro randomString(length) -%}
    {%- set string = [] -%}
    {%- set alpha = 'abcdefghijklmnopqrstuvwxyz' -%}
    {%- set numbers = '0123456789' -%}
    {%- for i in 1..length -%}
      {%- set randomCharacter = random(alpha ~ alpha|upper ~ numbers) -%}
      {%- set string = string|merge([randomCharacter]) -%}
    {%- endfor -%}
    {%- set string = string|join -%}
    {{- string -}}
  {%- endmacro -%}

  {#
    summarize
    Takes a block of HTML text, strips the tags and trims it to match a given length in characters to act as a summary.
    @param {string} text (The text to be summarized)
    @param {int} chars (The length of the summarized text in characters)
    @param {string} append (String to add to the end of the returned text, e.g '...') (optional)
  #}

  {%- macro summarize(text, chars, append) -%}
    {%- set append = append|default() -%}
    {%- set text = text|striptags -%}
    {%- if text|length > chars -%}
      {{- text[:chars]|trim -}}{%- if append -%}{{ append|raw }}{%- endif -%}
    {%- else -%}
      {{- text -}}
    {%- endif -%}
  {%- endmacro -%}